{"version":3,"sources":["Components/Login/Login.js","apiCalls.js","Components/MovieCard/MovieCard.js","Components/MoviesContainer/MoviesContainer.js","Components/CharacterCard/CharacterCard.js","Components/CharactersContainer/CharactersContainer.js","Components/NavBar/NavBar.js","Components/FavouritesContainer/FavouritesContainer.js","Components/ScrollText/ScrollText.js","Components/App/App.js","serviceWorker.js","index.js"],"names":["Login","handleChange","e","setState","target","name","value","sendUpState","userInfo","props","state","quote","rank","this","className","src","alt","placeholder","type","onChange","onClick","disabled","to","Component","getCharacters","allCharacters","characterInfo","map","charUrl","fetch","then","resp","ok","Error","json","char","fetchedHomeworld","getHomeworld","homeworld","home","fetchedSpecies","getSpecies","species","charSpecies","fetchedFilms","getFilms","films","film","Promise","all","data","id","Date","now","population","isFavorite","url","catch","err","console","log","speciesChar","allFilms","charactFilms","movie","title","MovieCard","episode_id","release_date","characters","openingCrawl","setCharacters","addMovieScroll","scrollInfo","MoviesContainer","movies","allMovies","opening_crawl","key","CharacterCard","toggleFavourites","favourites","theFilm","i","toggleIcon","includes","CharactersContainer","character","NavBar","userName","userQuote","userRank","favCount","resetOnLogOut","activeClassName","exact","FavouritesContainer","length","characterList","ScrollText","movieScroll","App","charactersUrl","characterData","deleteFavourites","addFavourites","deletedFav","filter","favourite","scroll","isLoading","response","results","firstTenCharacters","slice","sort","a","b","path","render","Boolean","window","location","hostname","match","router","ReactDOM","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.8b062e9a.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport './Login.scss';\nimport PropTypes from 'prop-types';\nimport { Link } from 'react-router-dom';\n\nclass Login extends Component {\n    constructor() {\n        super();\n        this.state = {\n            name: '',\n            quote: '',\n            rank: ''\n        }\n    }\n\n    handleChange = (e) => {\n       this.setState({ [e.target.name] : e.target.value })\n    }\n\n    sendUpState = () => {\n       const { userInfo } = this.props;\n       userInfo(this.state);\n    }\n\n    render() {\n        const { name, rank, quote } = this.state;\n        return (\n          <div>\n            <h1>Star Wars Trivia</h1>\n            <img className=\"yoda_head\" src=\"http://pluspng.com/img-png/yoda-head-png-download-800.gif\" alt=\"yoda's face\"></img>\n            <h2 className=\"tantive_heading\">Tantive Edition</h2>\n            <form>\n                <input className='user-name'\n                       placeholder='Must Name Here'\n                       type='text' \n                       name='name'\n                       value={this.state.name} \n                       onChange={(e) => this.handleChange(e)}/>\n                <input className='user-quote'\n                       placeholder='Quote Favourite'\n                       type='text' \n                       name='quote'\n                       value={this.state.quote} \n                       onChange={(e) => this.handleChange(e)}/>\n                <p>What Knowledge have you from Star Wars?</p>\n                <section>\n                    <button  \n                      className=\"knowledge_button\" \n                      type='button' \n                      name='rank' \n                      value='Novice' \n                      onClick={(e) => this.handleChange(e)} \n                      >Novice\n                    </button>\n                    <button \n                      className=\"knowledge_button\" \n                      type='button' \n                      name='rank' \n                      value='Intermediate' \n                      onClick={(e) => this.handleChange(e)}>Intermediate\n                    </button>\n                    <button \n                      className=\"knowledge_button\"  \n                      type='button' \n                      name='rank' \n                      value='Expert' \n                      onClick={(e) => this.handleChange(e)}\n                      >Expert \n                    </button>\n                </section>\n                { name === '' || quote === '' || rank === '' ? \n                ( <button className='submit-btn-error' disabled={true}> Inputs Must Fill </button>)\n                : \n                 (<Link to='/movies' ><button onClick={this.sendUpState} className='submit-btn'>Submit</button></Link> )\n                }\n            </form>\n          </div>\n        )\n    }\n}\n\nLogin.propTypes = {\n  userInfo: PropTypes.func\n}\n\nexport default Login;","export const getMovies = () => {\n  return fetch('https://swapi.co/api/films/')\n  .then(response => {\n    if (!response.ok) {\n      throw Error('There was an error getting the data');\n    }\n    return response.json();\n  })\n    .then(movies => {\n      return movies.results.map((movie) => {\n        const firstTenCharacters = movie.characters.slice(0, 10)\n        return {\n          title: movie.title,\n          episode_id: movie.episode_id,\n          release_date: movie.release_date.slice(0, 4),\n          characters: firstTenCharacters,\n          opening_crawl: movie.opening_crawl\n        }\n      }); \n    });\n  };\n\nexport const getCharacters = (allCharacters) => {\n       const characterInfo = allCharacters.map((charUrl) => {\n           return fetch(charUrl)\n           .then(resp => {\n            if (!resp.ok) {\n              throw Error('Error fetching characters');\n            }\n            return resp.json();\n          })\n           .then(char => {\n              const fetchedHomeworld = getHomeworld(char.homeworld)\n                                     .then(home => home)\n              const fetchedSpecies = getSpecies(char.species)\n                                     .then(charSpecies => charSpecies.species)\n              const fetchedFilms = getFilms(char.films)\n                                   .then(film => film)\n\n             return Promise.all([fetchedHomeworld, fetchedSpecies, fetchedFilms])\n             .then(data => ({\n                id: Date.now(),\n                name: char.name,\n                homeworld: data[0].name,\n                population: data[0].population,\n                species: data[1],\n                films: data[2],\n                isFavorite: false\n             }));\n           })\n       });\n       return Promise.all(characterInfo)\n              .then(data => data)\n};\n\nconst getHomeworld = (url) => {\n  return fetch(url)\n  .then(resp => {\n    if (!resp.ok) {\n      throw Error('Error fetching HomeWorld');\n    }\n    return resp.json();\n  })\n  .then(homeworld => ({ name: homeworld.name, population: homeworld.population }))\n  .catch(err => console.log(err))\n}\n\nconst getSpecies = (url) => {\n    return fetch(url)\n    .then(resp => {\n        if (!resp.ok) {\n          throw Error('Error fetching ideas');\n        }\n        return resp.json();\n      })\n    .then(speciesChar => ({ species: speciesChar.name }))\n    .catch(err => console.log(err))\n}\n\nconst getFilms = (allFilms) => {\n   const charactFilms = allFilms.map((film) => {\n       return fetch(film)\n       .then(resp => {\n        if (!resp.ok) {\n          throw Error('Error fetching ideas');\n        }\n        return resp.json();\n      })\n       .then(movie => movie.title)\n       .catch(err => console.log(err))\n   })\n   return Promise.all(charactFilms);\n}\n","import React from 'react';\nimport { Link } from 'react-router-dom';\nimport PropTypes from 'prop-types';\nimport './MovieCard.scss';\n\nconst MovieCard = ({ title, episode_id, release_date, id, characters, openingCrawl, setCharacters, addMovieScroll }) => {\n    \n  const scrollInfo = {\n    title,\n    episode_id,\n    openingCrawl\n  }\n\n   return ( \n    <article className=\"movieCard\">\n      <ul>    \n        <li>{title}</li>\n        <li>Episode: {episode_id}</li>\n        <li>Released in {release_date}</li>\n        <Link to='/scroll'>\n        <button  \n          className=\"movie_card_btn\" \n          type=\"submit\" \n          onClick={() => {\n            setCharacters(characters)\n            addMovieScroll(scrollInfo)\n            }}>View Characters\n        </button>\n        </Link>\n      </ul>\n    </article>\n    )\n}\n\nMovieCard.propTypes = {\n  title: PropTypes.string, \n  episode_id: PropTypes.number, \n  release_date: PropTypes.number, \n  id: PropTypes.number, \n  characters: PropTypes.array, \n  openingCrawl: PropTypes.string, \n  setCharacters: PropTypes.func, \n  addMovieScroll: PropTypes.func\n}\n\nexport default MovieCard;","import React from 'react';\nimport MovieCard from '../MovieCard/MovieCard';\nimport PropTypes from 'prop-types';\nimport './MoviesContainer.scss';\n\nconst MoviesContainer = ({ movies, setCharacters, addMovieScroll }) => {\n    let allMovies = movies.map(movie => {\n    return <MovieCard \n            title={movie.title}\n            episode_id={movie.episode_id}\n            release_date={movie.release_date}\n            id={movie.episode_id}\n            characters={movie.characters}\n            openingCrawl={movie.opening_crawl}\n            key={movie.episode_id}\n            setCharacters={setCharacters}\n            addMovieScroll={addMovieScroll}\n            />\n        });  \n    return (\n            <section className='movie-container'>\n              {allMovies}\n            </section>\n    )\n}\n\nMoviesContainer.propTypes = {\n  movies: PropTypes.array, \n  setCharacters: PropTypes.func, \n  addMovieScroll: PropTypes.func\n}\n\nexport default MoviesContainer;","import React from 'react';\nimport './CharacterCard.scss';\nimport PropTypes from 'prop-types';\nimport { FaJedi } from \"react-icons/fa\";\n\nconst CharacterCard = ({ id, name, homeworld, population, species, films, toggleFavourites, favourites }) => {\n  const theFilm = films.map((film, i) => <p key={i}>{film}</p>);\n  const toggleIcon = favourites.includes(id) ? 'favourite-icon' : 'jedi-icon';\n  return ( \n      <section className='card'>\n        <p className={toggleIcon} onClick={() => toggleFavourites(id)}><FaJedi/></p>\n        <h2>{name}</h2>\n        <h3>Homeworld:</h3>\n        <p>{homeworld}</p>\n        <h3>Population:</h3>\n        <p>{population}</p>\n        <h3>Species: </h3>\n        <p>{species}</p>\n        <h3>Seen in:</h3>\n        {theFilm}\n      </section>\n  ) \n}\n\nCharacterCard.propTypes = {\n  id: PropTypes.number, \n  name: PropTypes.string, \n  homeworld: PropTypes.string, \n  population: PropTypes.number, \n  species: PropTypes.string, \n  films: PropTypes.array, \n  toggleFavourites: PropTypes.func, \n  favourites: PropTypes.array\n}\n\nexport default CharacterCard;","import React from 'react';\nimport './CharactersContainer.scss';\nimport PropTypes from 'prop-types';\nimport CharacterCard from '../CharacterCard/CharacterCard';\n\nconst CharactersContainer = ({ characters, toggleFavourites, favourites }) => {\n    const allCharacters = characters.map((character) => {\n        return <CharacterCard key={character.name} {...character} toggleFavourites={toggleFavourites} favourites={favourites} />\n    })\n   return ( \n           <section className='characters'>\n             {allCharacters} \n           </section>\n   )\n}\n\nCharactersContainer.propTypes = {\n  characters: PropTypes.array, \n  toggleFavourites: PropTypes.func, \n  favourites: PropTypes.array\n}\n\nexport default CharactersContainer;"," import React from 'react';\n import './NavBar.scss';\n import PropTypes from 'prop-types';\n import { NavLink } from 'react-router-dom';\n\n const NavBar = ({userName, userQuote, userRank, favCount, resetOnLogOut }) => {\n     return (\n         <nav>\n            <div>\n                <img src='https://am22.akamaized.net/tms/cnt/uploads/2017/08/leiatop1-650x574.jpg' alt='Princess Leia' />\n                <h2>{userName}</h2>\n                <h3>\"{userQuote}\"</h3>\n                <h3>{userRank}</h3>\n            </div>\n            <div className='nav-links'>\n                <NavLink to='/movies' className='nav' activeClassName='active-nav' >Movies</NavLink>\n                <NavLink to='/favourites' className='nav' activeClassName='active-nav' >Favourites {favCount}</NavLink>\n                <NavLink exact to='/' > <button className='nav' onClick={() => resetOnLogOut()}> Log Out </button> </NavLink>\n            </div>\n         </nav> \n     )\n }\n\nNavBar.propTypes = {\n    userName: PropTypes.string, \n    userQuote: PropTypes.string, \n    userRank: PropTypes.string, \n    favCount: PropTypes.number, \n    resetOnLogOut: PropTypes.func\n}\n\nexport default NavBar;","import React from 'react';\nimport { Link } from 'react-router-dom';\nimport './FavouritesContainer.scss';\nimport PropTypes from 'prop-types';\nimport CharacterCard from '../CharacterCard/CharacterCard';\n\n \nconst FavouritesContainer = ({ toggleFavourites, favourites, characters }) => {\n    if(favourites.length === 0) {\n      return (\n        <section className='blank_error'>\n        <h2 className='fav_h2'>Want to see your favorite character!</h2>\n          <h3 className='fav_h3'>Go back to movies and select a few first.</h3>\n          <Link to='/movies'>\n            <button className='back_to_movies__btn'>Back to Movies</button>\n          </Link>\n        </section>\n      ) \n    } \n\nconst characterList = characters.map((character) => {\n    if (favourites.includes(character.id)) {\n      return <CharacterCard\n        id={character.id}\n        name={character.name} \n        homeworld={character.homeworld}\n        population={character.population}\n        species={character.species}\n        films={character.films}\n        toggleFavourites={toggleFavourites} \n        favourites={favourites}\n        />\n    }\n});\n\n   return (\n     <section className='favourite'>\n       {characterList}\n     </section>\n    )\n}\n\nFavouritesContainer.propTypes = {\n  toggleFavourites: PropTypes.func, \n  favourites: PropTypes.array, \n  characters: PropTypes.array\n}\n\nexport default FavouritesContainer;","import React from 'react';\nimport './ScrollText.scss';\nimport PropTypes from 'prop-types';\nimport { Link } from 'react-router-dom';\n\nconst ScrollText = ({ movieScroll }) => {\n    return (\n      <section>\n          <section className='scroll-text'>\n            <div className=\"fade\"></div>\n            <section className='star-wars-text'>\n              <div className='crawl'>\n              <div className='title-text'>\n                <p>Episode {movieScroll.episode_id}</p>\n                <h3>{movieScroll.title}</h3>\n              </div>\n              {movieScroll.openingCrawl}\n            </div>\n          </section> \n      </section>\n       <Link to='/movies/:id'>\n         <button className=\"scroll-button\" >Continue to see characters..</button>\n       </Link>\n      </section>\n    )\n}\n\nScrollText.propTypes = {\n  movieScroll: PropTypes.object\n}\n\nexport default ScrollText;","import React, {Component} from 'react';\nimport { Route, Switch } from 'react-router-dom';\nimport Login from '../Login/Login';\nimport './App.scss';\nimport { getMovies, getCharacters } from '../../apiCalls';\n\nimport MoviesContainer from '../MoviesContainer/MoviesContainer';\nimport CharactersContainer from '../CharactersContainer/CharactersContainer';\nimport NavBar from '../NavBar/NavBar';\nimport FavouritesContainer from '../FavouritesContainer/FavouritesContainer';\nimport ScrollText from '../ScrollText/ScrollText';\n\nclass App extends Component {\n  constructor() {\n    super()\n    this.state = {\n      movies: [],\n      characters: [],\n      userName: '',\n      userQuote: '',\n      userRank: '',\n      isLoading: true,\n      favourites: [],\n      movieScroll: {}\n    }\n  }\n\n  userInfo = ({name, quote, rank}) => {\n     this.setState({\n      userName: name,\n      userQuote: quote,\n      userRank: rank\n     })\n  }\n\n  componentDidMount() {\n    getMovies()\n     .then(movies => movies.sort((a, b) => a.episode_id - b.episode_id))\n     .then(movies => this.setState({ movies, isLoading: false}))\n     .catch(err => console.log(err))\n    }\n\n  setCharacters = (charactersUrl) => {\n    getCharacters(charactersUrl).then(characterData => this.setState({characters: characterData}))\n  }\n\n  toggleFavourites = (id) => {\n    const { favourites } = this.state;\n    favourites.includes(id) ? this.deleteFavourites(id) : this.addFavourites(id);\n  }\n\n  addFavourites = (id) => {\n    const { favourites } = this.state;\n    return this.setState({ favourites : [...favourites, id] });\n  }\n\n  deleteFavourites = (id) => {\n    const { favourites } = this.state;\n    let deletedFav = favourites.filter((favourite) => favourite !== id);\n    return this.setState({ favourites : deletedFav });\n  }\n\n  resetOnLogOut = () => {\n    this.setState({\n      characters: [],\n      userName: '',\n      userQuote: '',\n      userRank: '',\n      favourites: []\n    })\n  }\n  \n  addMovieScroll = (scroll) => {\n    this.setState({ movieScroll: scroll });\n  }\n\n  render() {\n    const { isLoading, userName, userQuote, userRank, favourites, movieScroll } = this.state;\n    return (\n      <main className=\"App\">\n        <Switch>\n          <Route exact path='/' render={() => <Login userInfo={this.userInfo}/> } />\n          {isLoading ? <img className='bb8-loading' src='https://media.giphy.com/media/eEbiAqk9YUT5e/giphy.gif' alt='BB8 gif' /> : \n          (<Route exact path='/movies' render={() => \n            <section className='movie-section'>\n             <NavBar userName={userName} userQuote={userQuote} userRank={userRank} favCount={favourites.length} resetOnLogOut={this.resetOnLogOut} />\n             <MoviesContainer movies={this.state.movies} userName={userName} userQuote={userQuote} userRank={userRank} setCharacters={this.setCharacters} addMovieScroll={this.addMovieScroll}/>\n            </section> \n          } />)}\n          <Route path='/scroll' render={() => <ScrollText movieScroll={movieScroll} /> } />\n          <Route path='/movies/:id' render={() => \n            <section className='movie-section'>\n              <NavBar userName={userName} userQuote={userQuote} userRank={userRank} favCount={favourites.length} resetOnLogOut={this.resetOnLogOut} />\n              <CharactersContainer characters={this.state.characters} toggleFavourites={this.toggleFavourites} favourites={favourites} />\n            </section>\n              } />\n          <Route path='/favourites/' render={() =>\n            <section className='movie-section'>\n              <NavBar userName={userName} userQuote={userQuote} userRank={userRank} favCount={favourites.length} resetOnLogOut={this.resetOnLogOut} />\n              <FavouritesContainer movies={this.state.movies} characters={this.state.characters} toggleFavourites={this.toggleFavourites} favourites={favourites} />\n            </section>\n          } />    \n        </Switch>\n      </main>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './Components/App/App';\nimport * as serviceWorker from './serviceWorker';\nimport { BrowserRouter } from 'react-router-dom'\n\nconst router = (\n  <BrowserRouter>\n    <App />\n  </BrowserRouter>\n)\n\nReactDOM.render(router, document.getElementById('root'));\n\n\nserviceWorker.unregister();\n"],"sourceRoot":""}